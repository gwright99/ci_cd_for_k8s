name: TFGHA_DEPLOY_TO_AWS

on:
  push:
    branches:
      - main
    paths:
      - tfgha/aws/*

defaults:
  run:
    shell: bash
    # working-directory: ./tfgha/aws
    # working-directory: tfgha/aws

jobs:
  deployviatf:
    # runs-on: ubuntu-latest
    runs-on: arc-runner-set    # <-- Local K8s cluster
    env:
      TF_DIR: tfgha/aws

    steps:
        - name: Install dependencies
          run: |
            sudo apt update
            sudo apt install -y git unzip --no-install-recommends

        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            sparse-checkout: |
              tfgha

        - name: Configure Git
          run: |
            git config user.name "$GITHUB_ACTOR"
            git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

        # Sept 2/24 Note:
        # When using standard GHA image, I need to install Node and TF as part of the action.
        # This was no longer once I generated a custom base image (with TF installed).
        # See: https://github.com/orgs/community/discussions/58278

        # - name: Install NodeJS
        #   uses: actions/setup-node@v2
        #   with:
        #     node-version: 16.13.1

        # - name: Install Terraform
        #   env:
        #     TERRAFORM_VERSION: "1.6.4"
        #   uses: hashicorp/setup-terraform@v3
        #   with:
        #     terraform_version: "$TERRAFORM_VERSION"

        - name: Verify Terraform version
          run: terraform --version

        - name: Terraform init
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: |
            # cd tfgha/aws
            terraform init -input=false
          working-directory: ${{ env.TF_DIR }}

        - name: Terraform validation
          run: |
            terraform validate
          working-directory: ${{ env.TF_DIR }}

        - name: Terraform apply
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: |
            terraform apply -auto-approve -input=false
          working-directory: ${{ env.TF_DIR }}